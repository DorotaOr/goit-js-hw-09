{"mappings":"AAKAA,SAASC,iBAAiB,oBAAoB,KAEvC,MAACC,EAAcF,SAASG,cAAc,gBACrCC,EAAaJ,SAASG,cAAc,eAC1C,IAAIE,EAAsB,KAGjBH,EAAGD,iBAAiB,SAAS,KACpCC,EAAYI,UAAW,EACjBD,EAAgBE,aAAY,KAChCP,SAASQ,KAAKC,MAAMC,gBAbjB,IAAIC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,KAaI,GACxD,IAAK,IAIHV,EAAIH,iBAAiB,SAAS,KACnCC,EAAYI,UAAW,EACrBS,cAAYV,EAAoB,GAClC","sources":["src/js/01-color-switcher.js"],"sourcesContent":["// Funkcja do generowania losowego koloru w formacie hex\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  //Zmienne dla przycisków: Używam document.querySelector do znalezienia przycisków w dokumencie HTML za pomocą ich atrybutów data-start i data-stop.\n  const startButton = document.querySelector('[data-start]');\n  const stopButton = document.querySelector('[data-stop]');\n  let colorChangeInterval = null; //Zmienna colorChangeInterval: Służy do przechowywania identyfikatora interwału, aby go zatrzymać, kiedy użytkownik naciśnie przycisk \"Stop\".\n\n  //Nasłuchiwanie na przycisku \"Start\": Gdy przycisk \"Start\" jest naciśnięty, przycisk staje się nieaktywny (aby zapobiec wielokrotnemu kliknięciu), a kolor tła <body> zaczyna zmieniać się co sekundę.\n  startButton.addEventListener('click', () => {\n    startButton.disabled = true; // Wyłącz przycisk Start, aby nie można było go kliknąć ponownie\n    colorChangeInterval = setInterval(() => {\n      document.body.style.backgroundColor = getRandomHexColor(); //Stosowanie stylów inline w kontekście JavaScript oznacza bezpośrednie modyfikowanie stylów elementu poprzez jego właściwość style. W podanym kodzie modyfikuję kolor tła (backgroundColor) elementu <body> właśnie w ten sposób, co jest formą stylu inline. Kiedy używam tej linii wewnątrz funkcji setInterval, co sekundę generuję nowy kolor za pomocą funkcji getRandomHexColor() i przypisuję go bezpośrednio do właściwości style.backgroundColor elementu <body>. Jest to równoznaczne ze zmianą stylów inline, ponieważ modyfikuje to bezpośrednio atrybut style elementu HTML, podobnie jak gdybym dodała lub zmieniła styl bezpośrednio w tagu HTML, np. <body style=\"background-color: #123456;\">.\n    }, 1000); // Zmień kolor tła co sekundę.\n  });\n\n  //Nasłuchiwanie na przycisku \"Stop\": Gdy przycisk \"Stop\" jest naciśnięty, przycisk \"Start\" staje się z powrotem aktywny, a zmiana koloru tła jest zatrzymywana poprzez wywołanie clearInterval z identyfikatorem interwału przechowywanym w colorChangeInterval.\n  stopButton.addEventListener('click', () => {\n    startButton.disabled = false; // Włącz przycisk Start\n    clearInterval(colorChangeInterval); // Zatrzymaj zmianę koloru tła\n  });\n});\n\n// Dodawanie skryptów do package.json\n// W pliku package.json projektu dodano skrypty (start i build), które umożliwią łatwe budowanie i uruchamianie projektu z Parcel. Zakładając, że plikiem wejściowym jest src/index.html.\n// Aby uruchomić projekt w trybie deweloperskim (z automatycznym odświeżaniem), użyj w Git Bash: npm run start; Aby zbudować projekt do produkcji, użyj: npm run build\n// Parcel automatycznie zoptymalizuje pliki dla produkcji podczas budowania.\n"],"names":["document","addEventListener","startButton","querySelector","stopButton","colorChangeInterval","disabled","setInterval","body","style","backgroundColor","Math","floor","random","toString","clearInterval"],"version":3,"file":"01-color-switcher.b21463b8.js.map"}